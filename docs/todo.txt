ToDo
====

- check defragment conditions, there seems to be an overflow in certain
  conditions
- check for corrupt files (size of 0xffffff)
  -> delete file and defragment
- rename command
- support open with "command0:filaname,w,p" notation; support the w for
  write, r for read; p only for prg type

- (no) test different banking schemas
- (ok) changes: only one banking mode necessary? -> yes, one
- (ok) changes: only one size field necessary? -> other changes
- (ok) fixed functions to get area 1 and 2 data
- (ok) only use one readef method with several initializations
- (ok) different banking schemas
- (ok) dirlist: blocks free
- (ok) pattern matchng for directories: eg "$0:Z*"

- (ok) rw efs
  + alternate between two equally sized areas (ll and lh of same banks
    or lh of different banks or mixed)
  + only one block will be used until full
  + when full, the defragment process starts
    copy all files to other location and erase previous location
  + calculate free size of used area by subtracting the active files
  
- (ok) calculate size of rw area

- (no) readst must indicate eof(eoi) before the last byte will be read
  (is this really a practical problem? readst is mostly done afte reading

- (ok) reading of file w/o eapi
  small code in $DF80 with an optimized loop (well, not optimized)

- (no for now) different library variants
  + (no) read and open only, no write, no verify
    does not need extra space
    average performance
  + (?) better performance (?)
    needs appr. 128 (half page) of non-bankable memory (no)
    ($0100-$7fff, $c000-$cfff)
  + (no) write and verify
    needs appr. another 64 bytes of non-bankable memory
  + variant could be set at runtime
  + (ok) read only without eapi
  + (op) eapi in permanent location
  + (ok) eapi in temporary location
  + (ok) minieapi for read only in 128 bytes

- (ok) read directory "$"

- (ok) open implementation
  + commands: none
  + open does all preparations
  + (ok) chrin only loads characters, no zeropage in chrin, except directory
  + close does nothing (ends state)
- (ok) close implementation
- (ok) chrin implementation

- (ok) save
  + (ok) commands: scratch, 
  + (ok) validate (defragment)
  + (ok) additional errors: 
    26:write protected
    72:disk full
    63:file exists -> scratch before write
- (ok) ef can have several file systems
  + basic read-only file system: dir in 00:1:0000 - 00:1:17ff
  + two freely positioned file systems for read/write, must be of same size
  + these must always span full eraseable blocks
  + these start with xx:0:0000 - xx:0:17ff as directory, followed by data
  + these can wrap in LL, HH or LH
  + saving can fail due to fragmentation


Directory listing
=================

01 04 address
addr   line   headline
01 01  00 00  12 22 41 53 53 20 50 52 45 53 45 4E 54 53 3A 20 20 20 22 20 20 20 20 20 31 00 

       size space (4)   "name(16)"                                                type $ mod (6 chars)
01 01  34 00  20 20     22 54 48 45 59 20 53 54 4F 4C 45 20 41 20 4D 2E 2B 22 20  50 52 47 20 20 20 00 
01 01  43 00  20 20     22 43 4F 44 45 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 20 00 
01 01  09 00  20 20 20  22 4D 41 50 31 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 00 
01 01  09 00  20 20 20  22 4D 41 50 32 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 00 
01 01  09 00  20 20 20  22 4D 41 50 33 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 00 
01 01  0A 00  20 20     22 4D 41 50 34 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 20 00 
01 01  0B 00  20 20     22 4D 41 50 35 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 20 00 
01 01  52 00  20 20     22 4D 45 4E 55 22 20 20 20 20 20 20 20 20 20 20 20 20 20  50 52 47 20 20 20 00 

addr   blocks b  l  o  c  k  s     f  r  e  e  .  13 spaces
01 01  9F 01  42 4C 4F 43 4B 53 20 46 52 45 45 2E 20 20 20 20 20 20 20 20 20 20 20 20 20 00 
00 00  00 (end)

state machines needs variables:
variable for name: 16 bytes) (not necessary if pointer can move backwards, which it can)
counter for name and sizes (1 byte)
variable for storing size for later filling (1 byte)
variable for storing the free size in blocks (2 bytes)


state machine (appr 33 states):
address low, address high, addr dummy, addr dummy, line dummy, line dummy,
reverse on, quotation mark, disk name (16), quotation mark, disk id(?),
terminator,

addr dummy, addr dummy, size low(x), size high(x), size filler(x), quotation mark, name(16,x2), quotation mark,
fill up(-16, x), type, fillup(x), terminator,

addr dummy, addr dumma, size low(x), size high(x), blocksfree(25), terminator
terminator, terminator, terminator

eof
